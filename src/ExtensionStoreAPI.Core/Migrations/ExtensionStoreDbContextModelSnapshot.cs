// <auto-generated />
using System;
using ExtensionStoreAPI.Core.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ExtensionStoreAPI.Core.Migrations
{
    [DbContext(typeof(ExtensionStoreDbContext))]
    partial class ExtensionStoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("extensionstore")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ExtensionStoreAPI.Core.DataAccess.Entities.ExtensionDownloadInfoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("d_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("d_created_timestamp");

                    b.Property<string>("DownloadedVersion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("d_version");

                    b.Property<int>("ExtensionId")
                        .HasColumnType("integer")
                        .HasColumnName("e_ref");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTimestamp");

                    b.HasIndex("DownloadedVersion");

                    b.HasIndex("ExtensionId");

                    b.ToTable("downloads", "extensionstore");
                });

            modelBuilder.Entity("ExtensionStoreAPI.Core.DataAccess.Entities.ExtensionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("e_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("e_author");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("e_category");

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("e_created_timestamp");

                    b.Property<string>("DSupportUserId")
                        .HasColumnType("text")
                        .HasColumnName("e_discord_author_userid");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("e_description");

                    b.Property<int>("ExtensionType")
                        .HasColumnType("integer")
                        .HasColumnName("e_type");

                    b.Property<string>("GitHubRepository")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("e_github_repository");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("e_name");

                    b.Property<string>("PackageId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("e_package_id");

                    b.Property<DateTime?>("UpdatedTimestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("e_updated_timestamp");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("ExtensionType");

                    b.HasIndex("PackageId")
                        .IsUnique();

                    b.ToTable("extensions", "extensionstore");
                });

            modelBuilder.Entity("ExtensionStoreAPI.Core.DataAccess.Entities.ExtensionFileEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("f_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("f_created_timestamp");

                    b.Property<int>("ExtensionId")
                        .HasColumnType("integer")
                        .HasColumnName("e_ref");

                    b.Property<string>("FileHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("f_file_hash");

                    b.Property<string>("IconFileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("f_icon_filename");

                    b.Property<string>("LicenseName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("f_license_name");

                    b.Property<string>("LicenseUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("f_license_url");

                    b.Property<int>("MinApiVersion")
                        .HasColumnType("integer")
                        .HasColumnName("f_min_api_version");

                    b.Property<string>("PackageFileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("f_pkg_filename");

                    b.Property<string>("Readme")
                        .HasColumnType("text")
                        .HasColumnName("f_readme");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("f_version");

                    b.HasKey("Id");

                    b.HasIndex("ExtensionId");

                    b.HasIndex("Version");

                    b.ToTable("files", "extensionstore");
                });

            modelBuilder.Entity("ExtensionStoreAPI.Core.DataAccess.Entities.ExtensionDownloadInfoEntity", b =>
                {
                    b.HasOne("ExtensionStoreAPI.Core.DataAccess.Entities.ExtensionEntity", "ExtensionEntity")
                        .WithMany("Downloads")
                        .HasForeignKey("ExtensionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExtensionEntity");
                });

            modelBuilder.Entity("ExtensionStoreAPI.Core.DataAccess.Entities.ExtensionFileEntity", b =>
                {
                    b.HasOne("ExtensionStoreAPI.Core.DataAccess.Entities.ExtensionEntity", "ExtensionEntity")
                        .WithMany("ExtensionFiles")
                        .HasForeignKey("ExtensionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExtensionEntity");
                });

            modelBuilder.Entity("ExtensionStoreAPI.Core.DataAccess.Entities.ExtensionEntity", b =>
                {
                    b.Navigation("Downloads");

                    b.Navigation("ExtensionFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
