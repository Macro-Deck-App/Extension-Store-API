// <auto-generated />
using System;
using MacroDeckExtensionStoreLibrary.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MacroDeckExtensionStoreLibrary.Migrations
{
    [DbContext(typeof(ExtensionStoreDbContext))]
    [Migration("20230124111348_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MacroDeckExtensionStoreLibrary.DataAccess.Entities.ExtensionDownloadInfoEntity", b =>
                {
                    b.Property<int>("ExtensionDownloadId")
                        .HasColumnType("integer")
                        .HasColumnName("exdl_id");

                    b.Property<DateTime>("DownloadDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("exdl_time");

                    b.Property<string>("DownloadedVersion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("exdl_version");

                    b.HasKey("ExtensionDownloadId");

                    b.ToTable("md_extension_downloads", (string)null);
                });

            modelBuilder.Entity("MacroDeckExtensionStoreLibrary.DataAccess.Entities.ExtensionEntity", b =>
                {
                    b.Property<int>("ExtensionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ext_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ExtensionId"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ext_author");

                    b.Property<string>("DSupportUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ext_discord_author_userid");

                    b.Property<int>("ExtensionType")
                        .HasColumnType("integer")
                        .HasColumnName("ext_type");

                    b.Property<string>("GitHubRepository")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ext_github_repository");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ext_name");

                    b.Property<string>("PackageId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ExtensionId");

                    b.ToTable("md_extensions", (string)null);
                });

            modelBuilder.Entity("MacroDeckExtensionStoreLibrary.DataAccess.Entities.ExtensionFileEntity", b =>
                {
                    b.Property<int>("ExtensionFileId")
                        .HasColumnType("integer")
                        .HasColumnName("extfl_id");

                    b.Property<string>("DescriptionHtml")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("extfl_readme_html");

                    b.Property<string>("IconFileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("extfl_icon_filename");

                    b.Property<string>("LicenseName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("extfl_license_name");

                    b.Property<string>("LicenseUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("extfl_license_url");

                    b.Property<string>("MD5Hash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("extfl_md5_hash");

                    b.Property<int>("MinApiVersion")
                        .HasColumnType("integer")
                        .HasColumnName("extfl_min_api_version");

                    b.Property<string>("PackageFileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("extfl_pkg_filename");

                    b.Property<DateTime>("UploadDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("extfl_upload_timestamp");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("extfl_version");

                    b.HasKey("ExtensionFileId");

                    b.ToTable("md_extension_files", (string)null);
                });

            modelBuilder.Entity("MacroDeckExtensionStoreLibrary.DataAccess.Entities.ExtensionDownloadInfoEntity", b =>
                {
                    b.HasOne("MacroDeckExtensionStoreLibrary.DataAccess.Entities.ExtensionEntity", "ExtensionEntity")
                        .WithMany("Downloads")
                        .HasForeignKey("ExtensionDownloadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExtensionEntity");
                });

            modelBuilder.Entity("MacroDeckExtensionStoreLibrary.DataAccess.Entities.ExtensionFileEntity", b =>
                {
                    b.HasOne("MacroDeckExtensionStoreLibrary.DataAccess.Entities.ExtensionEntity", "ExtensionEntity")
                        .WithMany("ExtensionFiles")
                        .HasForeignKey("ExtensionFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExtensionEntity");
                });

            modelBuilder.Entity("MacroDeckExtensionStoreLibrary.DataAccess.Entities.ExtensionEntity", b =>
                {
                    b.Navigation("Downloads");

                    b.Navigation("ExtensionFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
